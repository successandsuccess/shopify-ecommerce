{% comment %}
Auto-generated by Shogun.
This file can be re-written at any time.
{% endcomment %}

<html class="no-js" lang="{{ request.locale.iso_code }}">
  <head>
    <script src="https://cdn.lrkt-in.com/LogRocket.min.js" crossorigin="anonymous"></script>
    <script>window.LogRocket && window.LogRocket.init('qtxy2a/twillory');</script>
    {% if customer %}
      <script>
        window.LogRocket && window.LogRocket.identify("{{customer.id}}", {
          name: '{{ customer.first_name }} {{ customer.last_name}}',
          email: '{{ customer.email }}',
        });
      </script>
    {% endif %}

    
    <script>
      let loadedSections = [];
      let executionResult = {};

      function initializeSection(sectionQuery, callback) {
        if (loadedSections.includes(sectionQuery)) {
          return;
        }

        loadedSections.push(sectionQuery);

        document.addEventListener('DOMContentLoaded', () => {
          const sections = document.querySelectorAll(sectionQuery);
          sections.forEach((section, index) => {
            if (section && section instanceof HTMLElement) {
              section.dataset.loadedIndex = index;
              executionResult[sectionQuery] = {
                ...executionResult[sectionQuery],
                [index]: callback(section),
              };
            }
          });
        });

        window.addEventListener('shopify:section:load', (event) => {
          const target = event.target;

          if (!(target instanceof HTMLElement)) {
            return;
          }

          const sectionClassName = sectionQuery.replace('.', '');

          const section = target.classList.contains(sectionClassName) ? target : null;

          if (section && section instanceof HTMLElement) {
            const index = section.dataset.lodadedIndex;
            executionResult[sectionQuery][index] = callback(section);
          }
        });

        window.addEventListener('shopify:section:unload', (event) => {
          const target = event.target;

          if (!(target instanceof HTMLElement)) {
            return;
          }

          const sectionClassName = sectionQuery.replace('.', '');

          const section = target.classList.contains(sectionClassName) ? target : null;

          if (section && section instanceof HTMLElement) {
            const index = section.dataset.loadedIndex;
            executionResult[sectionQuery][index]?.unload?.();
            loadedSections = loadedSections.filter((section) => section !== sectionQuery);
          }
        });
      }
    </script>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1">
    <meta name="theme-color" content="">
      {% comment %} Google Meta tags {% endcomment %}
    <meta name="google-site-verification" content="keauo9zpDVKVCnZ8BQQK3akRE5ipnoPYHg60i43FT9E">
    <meta name="google-site-verification" content="MAxCKbvG4VHH2pVyNi2kR8nUBgcgqdVLxvu4JTwd8I8">
    <meta name="google-site-verification" content="qt\04T0uWOYftYOslKbR-z3eo9ZfK0SKaib9oSi0wb6M">
    <meta name="google-site-verification" content="mnyVlyWGiOeqQjzmdYyevVxc5ZC7ROw3owbmfxKUJfY">

    <link rel="canonical" href="{{ canonical_url }}">

    {%- if settings.favicon != blank -%}
      <link
        rel="icon"
        type="image/png"
        href="{{ settings.favicon | image_url: width: 32, height: 32 }}">
    {%- endif -%}

    {%- unless settings.type_header_font.system? and settings.type_body_font.system? -%}
      <link
        rel="preconnect"
        href="https://fonts.shopifycdn.com"
        crossorigin>
    {%- endunless -%}

    <title>
      {{ page_title }}
      {%- if current_tags %}
        &ndash; tagged "{{ current_tags | join: ', ' }}"{% endif -%}
      {%- if current_page != 1 %}
        &ndash; Page {{ current_page }}{% endif -%}
      {%- unless page_title contains shop.name %}
        &ndash; {{ shop.name }}{% endunless -%}
    </title>

    {% if page_description %}
      <meta name="description" content="{{ page_description | escape }}">
    {% endif %}

    {% render 'meta-tags' %}
    {% render 'meta-price' %}

    <script src="{{ 'constants.js' | asset_url }}" defer="defer"></script>
    <script src="{{ 'pubsub.js' | asset_url }}" defer="defer"></script>
    <script src="{{ 'global.js' | asset_url }}" defer="defer"></script>
    {%- if settings.animations_reveal_on_scroll -%}
      <script src="{{ 'animations.js' | asset_url }}" defer="defer"></script>
    {%- endif -%}

    <script src="{{ 'flip-pixel-code.js' | asset_url }}" defer="defer"></script>

    {% render 'content-for-header-optimization' %}
    <script>
      (function () {
        // Override document.createElement
        const originalCreateElement = document.createElement;

        document.createElement = function (tagName, ...args) {
          if (tagName.toLowerCase() === 'script') {
            const scriptElement = originalCreateElement.call(document, tagName, ...args);

            // Intercept the `src` attribute of the script
            Object.defineProperty(scriptElement, 'src', {
              set(url) {
                // Validate that the URL is a string
                if (typeof url === 'string') {
                  const blockedUrls = [
                    "https://www.clarity.ms/"
                  ];

                  // Check if the URL is blocked
                  if (blockedUrls.some(blockedUrl => url.includes(blockedUrl))) {
                    console.log(`Blocked script from loading: ${url}`);
                    return; // Prevent setting the `src` attribute
                  }
                }

                this.setAttribute('src', url); // Allow non-blocked URLs
              },
              get() {
                return this.getAttribute('src');
              }
            });

            return scriptElement;
          }

          // Default behavior for other elements
          return originalCreateElement.call(document, tagName, ...args);
        };
      })();

    </script>

    {{ content_for_header }}

    {%- liquid
      assign body_font_bold = settings.type_body_font | font_modify: 'weight', 'bold'
      assign body_font_italic = settings.type_body_font | font_modify: 'style', 'italic'
      assign body_font_bold_italic = body_font_bold | font_modify: 'style', 'italic'
      assign body_font_medium = settings.type_body_font | font_modify: 'weight', '600'
      assign heading_font_medium = settings.type_header_font | font_modify: 'weight', '600'
    %}

    {% style %}
      {{ settings.type_body_font | font_face: font_display: 'swap' }}
      {{ body_font_medium | font_face: font_display: 'swap' }}
      {{ body_font_bold | font_face: font_display: 'swap' }}
      {{ body_font_italic | font_face: font_display: 'swap' }}
      {{ body_font_bold_italic | font_face: font_display: 'swap' }}
      {{ settings.type_header_font | font_face: font_display: 'swap' }}
      {{ heading_font_medium | font_face: font_display: 'swap' }}

      @font-face {
        font-family: 'Arial';
        src: url('{{ "Arial-ItalicMT.woff" | asset_url }}') format("woff2")
        , url('{{ "Arial-ItalicMT.woff2" | asset_url }}') format("woff");
        font-weight: normal;
        font-style: italic;
        font-display: swap;
      }
      @font-face {
        font-family: 'Swiss Light';
        src: url("//twillory.com/cdn/shop/files/swiss_721_light-webfont.eot%22);%0A%20%20src:%20url(%22%7B%7B?147116") format("embedded-opentype"), url("//twillory.com/cdn/shop/files/swiss_721_light-webfont.woff2?v=8698560681882110810") format("woff2"), url("//twillory.com/cdn/shop/files/swiss_721_light-webfont.woff?v=9740281258890713682") format("woff"), url("//twillory.com/cdn/shop/files/swiss_721_light-webfont.ttf?v=15603410867617371216") format("truetype"), url("//twillory.com/cdn/shop/files/swiss_721_light-webfont.svg%23swiss_721light?147116") format("svg");
        font-weight: normal;
        font-style: normal; 
      }
      {% assign scheme_classes = "" %}
      {% for scheme in settings.color_schemes -%}
        {% assign scheme_classes = scheme_classes | append: ', .color-' | append: scheme.id %}
        {% if forloop.index == 1 -%}
          :root, 
        {%- endif %}
        .color-{{ scheme.id }} {
          --color-background: {{ scheme.settings.background.red }}, 
          {{ scheme.settings.background.green }}, 
          {{ scheme.settings.background.blue }};
          {% if scheme.settings.background_gradient != empty %}
            --gradient-background: {{ scheme.settings.background_gradient }};
          {% else %}
            --gradient-background: {{ scheme.settings.background }};
          {% endif %}
          --color-foreground: {{ scheme.settings.text.red }}, 
          {{ scheme.settings.text.green }}, 
          {{ scheme.settings.text.blue }};
          --color-shadow: {{ scheme.settings.shadow.red }}, 
          {{ scheme.settings.shadow.green }}, 
          {{ scheme.settings.shadow.blue }};
          --color-button: {{ scheme.settings.button.red }}, 
          {{ scheme.settings.button.green }}, 
          {{ scheme.settings.button.blue }};
          --color-button-text: {{ scheme.settings.button_label.red }}, 
          {{ scheme.settings.button_label.green }}, 
          {{ scheme.settings.button_label.blue }};
          --color-secondary-button: {{ scheme.settings.background.red }}, 
          {{ scheme.settings.background.green }}, 
          {{ scheme.settings.background.blue }};
          --color-secondary-button-text: {{ scheme.settings.secondary_button_label.red }}, 
          {{ scheme.settings.secondary_button_label.green }}, 
          {{ scheme.settings.secondary_button_label.blue }};
          --color-link: {{ scheme.settings.secondary_button_label.red }}, 
          {{ scheme.settings.secondary_button_label.green }}, 
          {{ scheme.settings.secondary_button_label.blue }};
          --color-badge-foreground: {{ scheme.settings.text.red }}, 
          {{ scheme.settings.text.green }}, 
          {{ scheme.settings.text.blue }};
          --color-badge-background: {{ scheme.settings.background.red }}, 
          {{ scheme.settings.background.green }}, 
          {{ scheme.settings.background.blue }};
          --color-badge-border: {{ scheme.settings.text.red }}, 
          {{ scheme.settings.text.green }}, 
          {{ scheme.settings.text.blue }};
          --payment-terms-background-color: rgb({{ scheme.settings.background.rgb }});
        }
      {% endfor %}

      {{ scheme_classes | prepend: 'body' }} {
        color: rgba(var(--color-foreground), 0.75);
        background-color: rgb(var(--color-background));
      }

      :root {
        --font-body-family: {{ settings.type_body_font.family }}, 
        {{ settings.type_body_font.fallback_families }};
        --font-body-style: {{ settings.type_body_font.style }};
        --font-body-weight: {{ settings.type_body_font.weight }};
        --font-body-weight-bold: {{ settings.type_body_font.weight | plus: 300 | at_most: 1000 }};

        --font-heading-family: {{ settings.type_header_font.family }}, 
        {{ settings.type_header_font.fallback_families }};
        --font-heading-style: {{ settings.type_header_font.style }};
        --font-heading-weight: {{ settings.type_header_font.weight }};

        --font-body-scale: {{ settings.body_scale | divided_by: 100.0 }};
        --font-heading-scale: {{ settings.heading_scale | times: 1.0 | divided_by: settings.body_scale }};

        --media-padding: {{ settings.media_padding }}px;
        --media-border-opacity: {{ settings.media_border_opacity | divided_by: 100.0 }};
        --media-border-width: {{ settings.media_border_thickness }}px;
        --media-radius: {{ settings.media_radius }}px;
        --media-shadow-opacity: {{ settings.media_shadow_opacity | divided_by: 100.0 }};
        --media-shadow-horizontal-offset: {{ settings.media_shadow_horizontal_offset }}px;
        --media-shadow-vertical-offset: {{ settings.media_shadow_vertical_offset }}px;
        --media-shadow-blur-radius: {{ settings.media_shadow_blur }}px;
        --media-shadow-visible: {% if settings.media_shadow_opacity > 0 %}1{% else %}0{% endif %};

      --page-width: {{ settings.page_width | divided_by: 10 }}rem;
      --page-width-margin: {% if settings.page_width == '1600' %}2{% else %}0{% endif %}rem;

    --product-card-image-padding: {{ settings.card_image_padding | divided_by: 10.0 }}rem;
    --product-card-corner-radius: {{ settings.card_corner_radius | divided_by: 10.0 }}rem;
    --product-card-text-alignment: {{ settings.card_text_alignment }};
    --product-card-border-width: {{ settings.card_border_thickness | divided_by: 10.0 }}rem;
    --product-card-border-opacity: {{ settings.card_border_opacity | divided_by: 100.0 }};
    --product-card-shadow-opacity: {{ settings.card_shadow_opacity | divided_by: 100.0 }};
    --product-card-shadow-visible: {% if settings.card_shadow_opacity > 0 %}1{% else %}0{% endif %};
  --product-card-shadow-horizontal-offset: {{ settings.card_shadow_horizontal_offset | divided_by: 10.0 }}rem;
  --product-card-shadow-vertical-offset: {{ settings.card_shadow_vertical_offset | divided_by: 10.0 }}rem;
  --product-card-shadow-blur-radius: {{ settings.card_shadow_blur | divided_by: 10.0 }}rem;

  --collection-card-image-padding: {{ settings.collection_card_image_padding | divided_by: 10.0 }}rem;
  --collection-card-corner-radius: {{ settings.collection_card_corner_radius | divided_by: 10.0 }}rem;
  --collection-card-text-alignment: {{ settings.collection_card_text_alignment }};
  --collection-card-border-width: {{ settings.collection_card_border_thickness | divided_by: 10.0 }}rem;
  --collection-card-border-opacity: {{ settings.collection_card_border_opacity | divided_by: 100.0 }};
  --collection-card-shadow-opacity: {{ settings.collection_card_shadow_opacity | divided_by: 100.0 }};
  --collection-card-shadow-visible: {% if settings.collection_card_shadow_opacity > 0 %}1{% else %}0{% endif %};
  --collection-card-shadow-horizontal-offset: {{ settings.collection_card_shadow_horizontal_offset | divided_by: 10.0 }}rem;
  --collection-card-shadow-vertical-offset: {{ settings.collection_card_shadow_vertical_offset | divided_by: 10.0 }}rem;
  --collection-card-shadow-blur-radius: {{ settings.collection_card_shadow_blur | divided_by: 10.0 }}rem;

  --blog-card-image-padding: {{ settings.blog_card_image_padding | divided_by: 10.0 }}rem;
  --blog-card-corner-radius: {{ settings.blog_card_corner_radius | divided_by: 10.0 }}rem;
  --blog-card-text-alignment: {{ settings.blog_card_text_alignment }};
  --blog-card-border-width: {{ settings.blog_card_border_thickness | divided_by: 10.0 }}rem;
  --blog-card-border-opacity: {{ settings.blog_card_border_opacity | divided_by: 100.0 }};
  --blog-card-shadow-opacity: {{ settings.blog_card_shadow_opacity | divided_by: 100.0 }};
  --blog-card-shadow-visible: {% if settings.blog_card_shadow_opacity > 0 %}1{% else %}0{% endif %};
  --blog-card-shadow-horizontal-offset: {{ settings.blog_card_shadow_horizontal_offset | divided_by: 10.0 }}rem;
  --blog-card-shadow-vertical-offset: {{ settings.blog_card_shadow_vertical_offset | divided_by: 10.0 }}rem;
  --blog-card-shadow-blur-radius: {{ settings.blog_card_shadow_blur | divided_by: 10.0 }}rem;

  --badge-corner-radius: {{ settings.badge_corner_radius | divided_by: 10.0 }}rem;

  --popup-border-width: {{ settings.popup_border_thickness }}px;
  --popup-border-opacity: {{ settings.popup_border_opacity | divided_by: 100.0 }};
  --popup-corner-radius: {{ settings.popup_corner_radius }}px;
  --popup-shadow-opacity: {{ settings.popup_shadow_opacity | divided_by: 100.0 }};
  --popup-shadow-horizontal-offset: {{ settings.popup_shadow_horizontal_offset }}px;
  --popup-shadow-vertical-offset: {{ settings.popup_shadow_vertical_offset }}px;
  --popup-shadow-blur-radius: {{ settings.popup_shadow_blur }}px;

  --drawer-border-width: {{ settings.drawer_border_thickness }}px;
  --drawer-border-opacity: {{ settings.drawer_border_opacity | divided_by: 100.0 }};
  --drawer-shadow-opacity: {{ settings.drawer_shadow_opacity | divided_by: 100.0 }};
  --drawer-shadow-horizontal-offset: {{ settings.drawer_shadow_horizontal_offset }}px;
  --drawer-shadow-vertical-offset: {{ settings.drawer_shadow_vertical_offset }}px;
  --drawer-shadow-blur-radius: {{ settings.drawer_shadow_blur }}px;

  --spacing-sections-desktop: {{ settings.spacing_sections }}px;
  --spacing-sections-mobile: {% if settings.spacing_sections < 24 %}{{ settings.spacing_sections }}{% else %}{{ settings.spacing_sections | times: 0.7 | round | at_least: 20 }}{% endif %}px;

  --grid-desktop-vertical-spacing: {{ settings.spacing_grid_vertical }}px;
  --grid-desktop-horizontal-spacing: {{ settings.spacing_grid_horizontal }}px;
  --grid-mobile-vertical-spacing: {{ settings.spacing_grid_vertical | divided_by: 2 }}px;
  --grid-mobile-horizontal-spacing: {{ settings.spacing_grid_horizontal | divided_by: 2 }}px;

  --text-boxes-border-opacity: {{ settings.text_boxes_border_opacity | divided_by: 100.0 }};
  --text-boxes-border-width: {{ settings.text_boxes_border_thickness }}px;
  --text-boxes-radius: {{ settings.text_boxes_radius }}px;
  --text-boxes-shadow-opacity: {{ settings.text_boxes_shadow_opacity | divided_by: 100.0 }};
  --text-boxes-shadow-visible: {% if settings.text_boxes_shadow_opacity > 0 %}1{% else %}0{% endif %};
  --text-boxes-shadow-horizontal-offset: {{ settings.text_boxes_shadow_horizontal_offset }}px;
  --text-boxes-shadow-vertical-offset: {{ settings.text_boxes_shadow_vertical_offset }}px;
  --text-boxes-shadow-blur-radius: {{ settings.text_boxes_shadow_blur }}px;

  --buttons-radius: {{ settings.buttons_radius }}px;
  --buttons-radius-outset: {% if settings.buttons_radius > 0 %}{{ settings.buttons_radius | plus: settings.buttons_border_thickness }}{% else %}0{% endif %}px;
  --buttons-border-width: {% if settings.buttons_border_opacity > 0 %}{{ settings.buttons_border_thickness }}{% else %}0{% endif %}px;
  --buttons-border-opacity: {{ settings.buttons_border_opacity | divided_by: 100.0 }};
  --buttons-shadow-opacity: {{ settings.buttons_shadow_opacity | divided_by: 100.0 }};
  --buttons-shadow-visible: {% if settings.buttons_shadow_opacity > 0 %}1{% else %}0{% endif %};
  --buttons-shadow-horizontal-offset: {{ settings.buttons_shadow_horizontal_offset }}px;
  --buttons-shadow-vertical-offset: {{ settings.buttons_shadow_vertical_offset }}px;
  --buttons-shadow-blur-radius: {{ settings.buttons_shadow_blur }}px;
  --buttons-border-offset: {% if settings.buttons_radius > 0 or settings.buttons_shadow_opacity > 0 %}0.3{% else %}0{% endif %}px;

  --inputs-radius: {{ settings.inputs_radius }}px;
  --inputs-border-width: {{ settings.inputs_border_thickness }}px;
  --inputs-border-opacity: {{ settings.inputs_border_opacity | divided_by: 100.0 }};
  --inputs-shadow-opacity: {{ settings.inputs_shadow_opacity | divided_by: 100.0 }};
  --inputs-shadow-horizontal-offset: {{ settings.inputs_shadow_horizontal_offset }}px;
  --inputs-margin-offset: {% if settings.inputs_shadow_vertical_offset != 0 and settings.inputs_shadow_opacity > 0 %}{{ settings.inputs_shadow_vertical_offset | abs }}{% else %}0{% endif %}px;
  --inputs-shadow-vertical-offset: {{ settings.inputs_shadow_vertical_offset }}px;
  --inputs-shadow-blur-radius: {{ settings.inputs_shadow_blur }}px;
  --inputs-radius-outset: {% if settings.inputs_radius > 0 %}{{ settings.inputs_radius | plus: settings.inputs_border_thickness }}{% else %}0{% endif %}px;

  --variant-pills-radius: {{ settings.variant_pills_radius }}px;
  --variant-pills-border-width: {{ settings.variant_pills_border_thickness }}px;
  --variant-pills-border-opacity: {{ settings.variant_pills_border_opacity | divided_by: 100.0 }};
  --variant-pills-shadow-opacity: {{ settings.variant_pills_shadow_opacity | divided_by: 100.0 }};
  --variant-pills-shadow-horizontal-offset: {{ settings.variant_pills_shadow_horizontal_offset }}px;
  --variant-pills-shadow-vertical-offset: {{ settings.variant_pills_shadow_vertical_offset }}px;
  --variant-pills-shadow-blur-radius: {{ settings.variant_pills_shadow_blur }}px;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

html {
  box-sizing: border-box;
  font-size: calc(var(--font-body-scale) * 62.5%);
  height: 100%;
}

body {
  display: grid;
  grid-template-rows: auto auto 1fr auto;
  grid-template-columns: 100%;
  min-height: 100%;
  margin: 0;
  font-size: 1.5rem;
  letter-spacing: 0.06rem;
  line-height: calc(1 + 0.8 / var(--font-body-scale));
  font-family: var(--font-body-family);
  font-style: var(--font-body-style);
  font-weight: var(--font-body-weight);
}

@media screen and (min-width: 750px) {
  body {
    font-size: 1.6rem;
  }
}
    {% endstyle %}

    {{ 'base.css' | asset_url | stylesheet_tag }}
    {{ 'custom.css' | asset_url | stylesheet_tag }}

    {%- unless settings.type_body_font.system? -%}
      {% comment %} {{ settings.type_body_font | font_url | preload_tag: as: 'font' }} {% endcomment %}
      {% comment %} <link href="{{ settings.type_body_font | font_url }}" type="font/woff2" crossorigin rel="preload" as="font"> {% endcomment %}
      {{ settings.type_body_font | font_url | preload_tag: as: 'script' }}
    {%- endunless -%}
    {%- unless settings.type_header_font.system? -%}
      {% comment %} {{ settings.type_header_font | font_url | preload_tag: as: 'font' }} {% endcomment %}
      {% comment %} <link rel="preload" as="font" href="{{ settings.type_header_font | font_url }}" type="font/woff2" crossorigin> {% endcomment %}
      {{ settings.type_header_font | font_url | preload_tag: as: 'script' }}
    {%- endunless -%}

    {%- if localization.available_countries.size > 1 or localization.available_languages.size > 1 -%}
      {{ 'component-localization-form.css' | asset_url | stylesheet_tag: preload: true }}
      <script src="{{ 'localization-form.js' | asset_url }}" defer="defer"></script>
    {%- endif -%}

    {%- if settings.predictive_search_enabled -%}
      <link
        rel="stylesheet"
        href="{{ 'component-predictive-search.css' | asset_url }}"
        media="print"
        onload="this.media='all'">
    {%- endif -%}

    <script>
      document.documentElement.className = document.documentElement.className.replace('no-js', 'js');
      if (Shopify.designMode) {
        document.documentElement.classList.add('shopify-design-mode');
      }
    </script>
    {% render 'header-scripts' %}
    {% render 'gtm'
      , position: 'header' %}
    {% render 'dns-prefetch-preconnect' %}

    {% comment %} Currency converter js start {% endcomment %}
    <script type="text/javascript">
      const symbol = '{{ cart.currency.symbol }}';
    </script>
    <script src="{{ 'convert-currency.js' | asset_url }}" defer="defer"></script>
    {% comment %} Currency converter js end {% endcomment %}

    <script>
      window.Shopify = window.Shopify || {theme: {id: {{ theme.id }}, role: '{{ theme.role }}' } };
      window._template = {
          directory: "{{ template.directory }}",
          name: "{{ template.name }}",
          suffix: "{{ template.suffix }}"
      }
    </script>
    <script src="https://cdn.intelligems.io/3d1e55a3adbf.js" defer="defer"></script>
    <script src="{{ 'product-card.js' | asset_url }}" defer></script>

    {%- if customer.metafields.sparklayer.authentication -%}
      <!-- Anything inside here only shows for logged in customers -->
      <!-- Start of SparkLayer core script -->
      <script>
        window.sparkOptions = {
          siteId: "twillory",
          platform: "shopify",
          rootUrl: {{ routes.root_url | json }},
          language: {{ request.locale.iso_code | json }},
          accountRedirect: {
            urlRegex: /\/account/g,
            goTo: "/index", // page to redirect logged in users to
          },
          display: {
            stock: {
              show: false, // set to true to show stock level display
              max: 50, // highest stock level to show
              last: 5, // last remaining stock
              low: 15, // low stock threshold
              last: true, // set to false to hide last stock message
            },
          },
          auth: {
            user: {{ customer.email | json }},
            token: {{ customer.metafields.sparklayer.authentication | json }},
          },
        };
      </script>
      <script async src="https://cdn.sparklayer.io/spark.1.35.x.js"></script>
      <!-- End of SparkLayer core script -->
      <!-- SparkLayer Sample CSS Code -->
      <style>
        type="text/css":root
        {
          /* Set the brand styling */
          --b2b-brand-color: #224697;
          /* Main brand colour*/
          --b2b-brand-color-hover: #333;
          /* Main brand colour hover */
          --b2b-brand-font: 'Swiss Medium'
          , sans-serif;
          /* Main brand font */
          --b2b-brand-font-heading: 'Swiss Medium'
          , sans-serif;
          /* Main brand heading font */

          /* Update colours */
          --spark-default-body-color: #555555;
          /* Main body colour*/
          --spark-primary-color: #000000;
          /* Main title colour*/
          --spark-secondary-color: var(--b2b-brand-color);
          /* Main highlight colour*/
          --spark-link-color: var(--b2b-brand-color);
          /* Link colour*/

          /* Typefaces */
          --spark-font-default: var(--b2b-brand-font);
          /* Body typeface*/
          --spark-font-highlight: var(--b2b-brand-font-heading);
          /* Highlight typeface*/
          --spark-font-weight-default: 400;
          /* Default font weight*/
          --spark-font-weight-medium: 500;
          /* Medium font weight*/
          --spark-font-weight-heavy: 600;
          /* Bold font weight*/

          /* General */
          --spark-border-radius-default: 0;
          /* Default border radius*/
          --spark-drawer-max-width: 700px;
          /* Width of overlay*/
          --spark-drawer-max-width-wide: 1000px;
          /* Width of overlay in maximised view*/

          /* Font sizes */
          --spark-font-default-size: 14px;
          /* Default font size*/
          --spark-font-default-size-small: 14px;
          /* Default font size - small screens*/
          --spark-header-font: var(--b2b-brand-font-heading);
          /* Header typeface*/
          --spark-header-font-weight: 500;
          /* Header font weight*/
          --spark-h1-fontsize: 24px;
          /* Header 1 font size*/
          --spark-h2-fontsize: 22px;
          /* Header 2 font size*/
          --spark-h3-fontsize: 20px;
          /* Header 3 font size*/
          --spark-h4-fontsize: 16px;
          /* Header 4 font size*/
          --spark-h5-fontsize: 15px;
          /* Header 5 font size*/
          --spark-h6-fontsize: 14px;
          /* Header 6 font size*/

          --spark-pricing-fontsize: 20px;
          /* Font size of pricing*/
          --spark-pricing-font-weight: 600;
          /* Font weight of pricing*/
          --spark-pricing-fontsize-small: 14px;
          /* Font size of pricing on mobile*/

          --spark-product-code-fontsize: 16px;
          /* Font size of product code*/
          --spark-product-code-font-weight: 500;
          /* Font weight of product code*/
          --spark-product-code-fontsize-small: 14px;
          /* Font size of product code on mobile*/
          --spark-product-stockstatus-align: flex-start;
          /* Aligment of stock status for single variants*/

          /* Buttons */
          --spark-button-font-family: var(--b2b-brand-font-heading);
          /* Button typeface*/
          --spark-button-color: var(--b2b-brand-color);
          /* Default sutton colour*/
          --spark-button-color-highlight: var(--b2b-brand-color-hover);
          /* Default button colour hover*/
          --spark-button-large-color: var(--b2b-brand-color);
          /* Large button colour*/
          --spark-button-large-color-highlight: var(--b2b-brand-color-hover);
          /* Large button colour hover*/
          --spark-border-radius-button: 5px;
          /* Button border radius*/
          --spark-button-font-weight: 600;
          /* Button font weight*/
          --spark-button-text-transform: uppercase;
          /* Button text transform*/
          --spark-button-text-letter-spacing: 1px;
          /* Button letter spacing*/
          --spark-button-padding: 1em 2.75em;
          /* Button padding*/
          --spark-button-small-font-size: 14px;
          /* Small button font size*/

          /* Tables */
          --spark-table-border-color: #cccccc;
          /* Table border colour*/
          --spark-table-header-background-color: #f1f1f1;
          /* Table header background*/
          --spark-table-header-text-color: #222222;
          /* Table header font colour*/
          --spark-table-header-font-weight: 500;
          /* Table header font weight*/

          /* Product Card */
          --spark-product-card-button-radius: 5px;
          /* Button radius*/
          --spark-product-card-button-padding: 0.75em 1em;
          /* Button padding*/
          --spark-product-card-pricing-font-size: 15px;
          /* Pricng font size*/
          --spark-product-card-pricing-font-size-small: 14px;
          /* Pricng font size on mobile*/
          --spark-product-card-select-min-height: 0;
          /* Set a min-height for select menu*/
        }

        .utility-bar__grid.page-width,
        .bundle-save,
        cart-drawer,
        variant-radios,
        .product .product__title + div[role='status'],
        .cta,
        [data-cart-view='data-cart-view'],
        [data-price-wrapper] {
          display: none !important;
        }
      </style>
      <!-- End SparkLayer Sample CSS Code -->
    {%- endif -%}
  
  {% render 'shogun-head' %}
  {% render 'dtc-global-css' %}

<script type="text/javascript">
 var _conv_page_type = "{{ request.page_type }}";
 var _conv_category_id = "{{ collection.id }}";
 var _conv_category_name = "{{ collection.title }}";
 var _conv_product_sku = "{{ product.selected_or_first_available_variant.sku }}";
 var _conv_product_name = '{{ product.title }}';
 var _conv_product_price = "{{ product.price_min | money_without_currency }}";
 var _conv_customer_id = "{{ customer.id }}";
 var _conv_custom_v1 = "{{ product.tags.first }}";
 var _conv_custom_v2 = "{{ collection.current_type }}";
 var _conv_custom_v3 = "{{ cart.item_count }}";
 var _conv_custom_v4 = "{{ cart.total_price | money_without_currency }}";
</script>

</head>
  <body class="gradient{% if settings.animations_hover_elements != 'none' %} animate--hover-{{ settings.animations_hover_elements }}{% endif %} template-{{ template.name }} temlate-suffix-{{ template.suffix }}">
    {% include 'shogun-content-handler' %}

    
    
    {{ content_for_layout }}
    
    <script>
      window.shopUrl = '{{ request.origin }}';
      window.routes = {
        cart_add_url: '{{ routes.cart_add_url }}',
        cart_change_url: '{{ routes.cart_change_url }}',
        cart_update_url: '{{ routes.cart_update_url }}',
        cart_url: '{{ routes.cart_url }}',
        predictive_search_url: '{{ routes.predictive_search_url }}',
      };

      window.cartStrings = {
        error: `{{ 'sections.cart.cart_error' | t }}`,
        quantityError: `{{ 'sections.cart.cart_quantity_error_html' | t: quantity: '[quantity]' }}`,
      };

      window.variantStrings = {
        addToCart: `{{ 'products.product.add_to_cart' | t }}`,
        soldOut: `{{ 'products.product.sold_out' | t }}`,
        unavailable: `{{ 'products.product.unavailable' | t }}`,
        unavailable_with_option: `{{ 'products.product.value_unavailable' | t: option_value: '[value]' }}`,
      };

      window.quickOrderListStrings = {
        itemsAdded: `{{ 'sections.quick_order_list.items_added.other' | t: quantity: '[quantity]' }}`,
        itemAdded: `{{ 'sections.quick_order_list.items_added.one' | t: quantity: '[quantity]' }}`,
        itemsRemoved: `{{ 'sections.quick_order_list.items_removed.other' | t: quantity: '[quantity]' }}`,
        itemRemoved: `{{ 'sections.quick_order_list.items_removed.one' | t: quantity: '[quantity]' }}`,
        viewCart: `{{- 'sections.quick_order_list.view_cart' | t -}}`,
        each: `{{- 'sections.quick_order_list.each' | t: money: '[money]' }}`,
      };

      window.accessibilityStrings = {
        imageAvailable: `{{ 'products.product.media.image_available' | t: index: '[index]' }}`,
        shareSuccess: `{{ 'general.share.success_message' | t }}`,
        pauseSlideshow: `{{ 'sections.slideshow.pause_slideshow' | t }}`,
        playSlideshow: `{{ 'sections.slideshow.play_slideshow' | t }}`,
        recipientFormExpanded: `{{ 'recipient.form.expanded' | t }}`,
        recipientFormCollapsed: `{{ 'recipient.form.collapsed' | t }}`,
      };
    </script>
<script src="{{%20'predictive-search.js'%20|%20asset_url%20}}" defer></script>
<script>
      Spurit.globalOnLoad = function () {
        Spurit.global.atc.onBeforeEventPrevented((event, target) => {
          target.hasAttribute('data-pre-order-atc-button');
        });
        Spurit.global.atc.onBefore((event, target, lineItems, submitMode, next) => {
          next(Spurit.global.constants.ATC.SUBMIT_MODE_AJAX, lineItems);
        });
        Spurit.global.atc.onAfter((event, target, lineItems, submitMode) => {
          if (submitMode !== Spurit.global.constants.ATC.SUBMIT_MODE_AJAX) {
            return;
          }
          //your code here to open AJAX
        });
      };
    </script>
<script>
      document.addEventListener('DOMContentLoaded', function() {
        var attributesToUpdate = {
          'availability': '{{ settings.filter_handle }}'
        };
        
        fetch('/cart/update.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ attributes: attributesToUpdate })
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          console.log('Cart updated successfully:', data);
        })
        .catch(error => {
          console.error('There was a problem with the fetch operation:', error);
        });
      });
    </script>
    <style type="text/css">
      body, html {
        width: 100% !important;
        background: white !important;
      }
    </style>
    
  </body>
</html>
